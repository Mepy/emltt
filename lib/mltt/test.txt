let nat : U 0 = W (x:Bool) if x then Unit else Void
let zero : nat = tree(false, \ x . exfalso x nat)
let succ : nat -> nat = \ n . tree(true, \ _ . n)
let plus : nat -> nat -> nat = 
    \ m . \ n . induct m at nat with
    | tree(a, s, h) => if a 
        then succ (h unit)
        else n
let plus : nat -> nat -> nat =
    \ m . induct m at nat -> nat with
    | tree(a, s, h) => if a 
        then \ n . succ (h unit n)
        else \ n . n


(* match V at x y p -> x.y.p.A with
| refl x ->  x.W  *)

let plus : nat -> nat -> nat = 
    \ m . \ n . induct m at nat with
    | tree(a, s, h) => if a with path 
        then (* path:a=true |- *) 
            let h' : Unit -> Nat = 
                match path at x y p -> if y then Unit else Void with
                | refl x -> h (* h : H(a) -> Nat *)
                (* noooo, should be h : (a:A) -> H(a) -> Nat *)
                (* also hard to elab, but explicit, no problem *)
            in succ (h' unit)
        else (* path:a=false |- *) n
let one = succ zero
let plus_one = plus one

let unit_unique : U 0 = Pi(x:Unit) Id(Unit, x, unit)
let unit_unique_proof : unit_unique =
    \ x . singleton x at y.Id(Unit, y, unit) with
    | unit => refl unit

let x : (A:U) -> (B:(a:A)->U 0) -> (C:(t:W(x:A)B(x))->U 0)
    -> (a:A) -> (s:B(a)->W(x:A)B(x)) -> (h:(b:B(a)->C(s(b))))
    -> C(Tree(a, s))
    = \ A . \ B . \ C . \ a . \ s . \ h . c