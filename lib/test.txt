let Loc : U<0> = Bool
let Val : U<0> = Bool

let subst : (A : Bool -> U<0>) (m : Bool) (n : Bool) -> (Id Bool m n) -> (A m) -> (A n) =
  fun A m n path ->
  match path at x y p -> (A x) -> (A y) with
  | refl _ -> fun x -> x

let discrimination : Id (Bool, tt, ff) -> Void =
    let large_elim : Bool -> U<0> = 
        fun x -> if x then Id(Bool, tt, tt) else Void end 
        (* Id(Bool, tt, tt) : U<0>, Void : U<0> *)
    in fun path -> subst large_elim tt ff refl(tt)